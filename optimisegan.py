# -*- coding: utf-8 -*-
"""optimisegan.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KdEUOUpVnhceaNDLQlkNUD6i0TgBygi-
"""

import torch
import torch.nn as nn
import torch.optim as optim
import torchvision.utils as vutils
from torch.utils.data import DataLoader
import torchvision.transforms as transforms
import torchvision.datasets as datasets

class Generator(nn.Module):
    def __init__(self, noise_dim, num_classes):
        super(Generator, self).__init__()
        self.fc = nn.Linear(noise_dim + num_classes, 256 * 7 * 7)
        self.conv_blocks = nn.Sequential(
            nn.BatchNorm2d(256),
            nn.ConvTranspose2d(256, 128, 4, stride=2, padding=1),
            nn.BatchNorm2d(128),
            nn.ReLU(),
            nn.ConvTranspose2d(128, 64, 4, stride=2, padding=1),
            nn.BatchNorm2d(64),
            nn.ReLU(),
            nn.ConvTranspose2d(64, 3, 3, stride=1, padding=1),
            nn.Tanh()
        )

    def forward(self, z, labels):
        z = torch.cat([z, labels], dim=1)
        z = self.fc(z).view(-1, 256, 7, 7)
        img = self.conv_blocks(z)
        return img

class Discriminator(nn.Module):
    def __init__(self):
        super(Discriminator, self).__init__()
        self.model = nn.Sequential(
            nn.utils.spectral_norm(nn.Conv2d(3, 64, 4, stride=2, padding=1)),
            nn.LeakyReLU(0.2, inplace=True),
            nn.utils.spectral_norm(nn.Conv2d(64, 128, 4, stride=2, padding=1)),
            nn.BatchNorm2d(128),
            nn.LeakyReLU(0.2, inplace=True),
            nn.Flatten(),
            nn.Linear(128 * 7 * 7, 1),
            nn.Sigmoid()
        )

    def forward(self, img):
        return self.model(img)

# Hyperparameters
lr = 0.0002
beta1 = 0.5
beta2 = 0.999
batch_size = 64
num_epochs = 50
noise_dim = 100
num_classes = 10
real_label = 0.9
fake_label = 0.1
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

# Load Dataset (Update dataset path)
transform = transforms.Compose([
    transforms.Resize(28),
    transforms.ToTensor(),
    transforms.Normalize([0.5], [0.5])
])
dataset = datasets.ImageFolder(root='/content/drive/MyDrive/dfu /PartB_DFU_Dataset/Infection', transform=transform)
dataloader = DataLoader(dataset, batch_size=batch_size, shuffle=True)

# Initialize Models & Optimizers
generator = Generator(noise_dim, num_classes).to(device)
discriminator = Discriminator().to(device)
optimizer_g = optim.Adam(generator.parameters(), lr=lr, betas=(beta1, beta2))
optimizer_d = optim.Adam(discriminator.parameters(), lr=lr, betas=(beta1, beta2))
criterion = nn.BCELoss()

num_classes = 10  # Adjust this according to your dataset

for epoch in range(50):
    for i, (imgs, labels) in enumerate(dataloader):
        imgs, labels = imgs.to(device), labels.to(device)

        # Convert labels to one-hot encoding
        labels_one_hot = torch.nn.functional.one_hot(labels, num_classes=num_classes).float()

        # Training Discriminator
        optimizer_d.zero_grad()
        real_labels = torch.full((imgs.size(0), 1), real_label, device=device)
        fake_labels = torch.full((imgs.size(0), 1), fake_label, device=device)

        d_real_loss = criterion(discriminator(imgs), real_labels)

        noise = torch.randn(imgs.size(0), noise_dim, device=device)
        gen_imgs = generator(noise, labels_one_hot)  # Use one-hot encoded labels

        d_fake_loss = criterion(discriminator(gen_imgs.detach()), fake_labels)
        d_loss = d_real_loss + d_fake_loss
        d_loss.backward()
        optimizer_d.step()

        # Training Generator
        optimizer_g.zero_grad()
        g_loss = criterion(discriminator(gen_imgs), real_labels)
        g_loss.backward()
        optimizer_g.step()

        if i % 100 == 0:
            print(f"Epoch [{epoch+1}/50], Step [{i}], D Loss: {d_loss.item():.4f}, G Loss: {g_loss.item():.4f}")